//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.ForTea.RiderPlugin.Model
{
  
  
  /// <summary>
  /// <p>Generated from: T4TestModel.kt:10</p>
  /// </summary>
  [JetBrains.Application.ShellComponent]
  public class T4TestModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdEndpoint<T4FileLocation, Unit> PreprocessFile => _PreprocessFile;
    [NotNull] public IRdEndpoint<Unit, Unit> WaitForIndirectInvalidation => _WaitForIndirectInvalidation;
    
    //private fields
    [NotNull] private readonly RdCall<T4FileLocation, Unit> _PreprocessFile;
    [NotNull] private readonly RdCall<Unit, Unit> _WaitForIndirectInvalidation;
    
    //primary constructor
    private T4TestModel(
      [NotNull] RdCall<T4FileLocation, Unit> preprocessFile,
      [NotNull] RdCall<Unit, Unit> waitForIndirectInvalidation
    )
    {
      if (preprocessFile == null) throw new ArgumentNullException("preprocessFile");
      if (waitForIndirectInvalidation == null) throw new ArgumentNullException("waitForIndirectInvalidation");
      
      _PreprocessFile = preprocessFile;
      _WaitForIndirectInvalidation = waitForIndirectInvalidation;
      BindableChildren.Add(new KeyValuePair<string, object>("preprocessFile", _PreprocessFile));
      BindableChildren.Add(new KeyValuePair<string, object>("waitForIndirectInvalidation", _WaitForIndirectInvalidation));
    }
    //secondary constructor
    private T4TestModel (
    ) : this (
      new RdCall<T4FileLocation, Unit>(T4FileLocation.Read, T4FileLocation.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<Unit, Unit>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => -6752357308006065093L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    public T4TestModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("T4TestModel"));
      Bind(lifetime, protocol, "T4TestModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("T4TestModel (");
      using (printer.IndentCookie()) {
        printer.Print("preprocessFile = "); _PreprocessFile.PrintEx(printer); printer.Println();
        printer.Print("waitForIndirectInvalidation = "); _WaitForIndirectInvalidation.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
