//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.ForTea.RiderPlugin.Model
{
  
  
  /// <summary>
  /// <p>Generated from: T4RdDocumentModel.kt:10</p>
  /// </summary>
  public class T4RdDocumentModel : RdExtBase
  {
    //fields
    //public fields
    
    /// <summary>
    /// Extension of the output file. If the file contains output directive with extension attribute, relies on that attribute value. Returns "cs" for executable files without explicitly specified extension. Returns null for preprocessed files without explicitly specified extension. Does not contain dot.
    /// </summary>
    [NotNull] public IViewableProperty<string> RawTextExtension => _RawTextExtension;
    
    //private fields
    [NotNull] private readonly RdProperty<string> _RawTextExtension;
    
    //primary constructor
    private T4RdDocumentModel(
      [NotNull] RdProperty<string> rawTextExtension
    )
    {
      if (rawTextExtension == null) throw new ArgumentNullException("rawTextExtension");
      
      _RawTextExtension = rawTextExtension;
      _RawTextExtension.OptimizeNested = true;
      _RawTextExtension.Async = true;
      _RawTextExtension.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("rawTextExtension", _RawTextExtension));
    }
    //secondary constructor
    internal T4RdDocumentModel (
    ) : this (
      new RdProperty<string>(ReadStringNullable, WriteStringNullable)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    protected override long SerializationHash => -4687457429087897410L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("T4RdDocumentModel (");
      using (printer.IndentCookie()) {
        printer.Print("rawTextExtension = "); _RawTextExtension.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class RdDocumentModelT4RdDocumentModelEx
   {
    public static T4RdDocumentModel GetT4RdDocumentModel(this JetBrains.Rider.Model.RdDocumentModel rdDocumentModel)
    {
      return rdDocumentModel.GetOrCreateExtension("t4RdDocumentModel", () => new T4RdDocumentModel());
    }
  }
}
