//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.ForTea.RiderPlugin.Model
{
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:10</p>
  /// </summary>
  public class T4ProtocolModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdCall<T4ExecutionRequest, Unit> RequestExecution => _RequestExecution;
    [NotNull] public IRdCall<T4ExecutionRequest, Unit> RequestDebug => _RequestDebug;
    [NotNull] public void PreprocessingStarted() => _PreprocessingStarted.Fire();
    [NotNull] public void PreprocessingFinished(T4PreprocessingResult value) => _PreprocessingFinished.Fire(value);
    [NotNull] public IRdEndpoint<T4FileLocation, T4ConfigurationModel> GetConfiguration => _GetConfiguration;
    [NotNull] public IRdEndpoint<T4FileLocation, T4BuildResult> RequestCompilation => _RequestCompilation;
    [NotNull] public IRdEndpoint<T4FileLocation, Unit> ExecutionSucceeded => _ExecutionSucceeded;
    [NotNull] public IRdEndpoint<T4FileLocation, Unit> ExecutionFailed => _ExecutionFailed;
    [NotNull] public IRdEndpoint<T4FileLocation, Unit> ExecutionAborted => _ExecutionAborted;
    [NotNull] public IRdEndpoint<T4FileLocation, List<int>> GetProjectDependencies => _GetProjectDependencies;
    [NotNull] public IRdEndpoint<T4FileLocation, Unit> PrepareExecution => _PrepareExecution;
    
    //private fields
    [NotNull] private readonly RdCall<T4ExecutionRequest, Unit> _RequestExecution;
    [NotNull] private readonly RdCall<T4ExecutionRequest, Unit> _RequestDebug;
    [NotNull] private readonly RdSignal<Unit> _PreprocessingStarted;
    [NotNull] private readonly RdSignal<T4PreprocessingResult> _PreprocessingFinished;
    [NotNull] private readonly RdCall<T4FileLocation, T4ConfigurationModel> _GetConfiguration;
    [NotNull] private readonly RdCall<T4FileLocation, T4BuildResult> _RequestCompilation;
    [NotNull] private readonly RdCall<T4FileLocation, Unit> _ExecutionSucceeded;
    [NotNull] private readonly RdCall<T4FileLocation, Unit> _ExecutionFailed;
    [NotNull] private readonly RdCall<T4FileLocation, Unit> _ExecutionAborted;
    [NotNull] private readonly RdCall<T4FileLocation, List<int>> _GetProjectDependencies;
    [NotNull] private readonly RdCall<T4FileLocation, Unit> _PrepareExecution;
    
    //primary constructor
    private T4ProtocolModel(
      [NotNull] RdCall<T4ExecutionRequest, Unit> requestExecution,
      [NotNull] RdCall<T4ExecutionRequest, Unit> requestDebug,
      [NotNull] RdSignal<Unit> preprocessingStarted,
      [NotNull] RdSignal<T4PreprocessingResult> preprocessingFinished,
      [NotNull] RdCall<T4FileLocation, T4ConfigurationModel> getConfiguration,
      [NotNull] RdCall<T4FileLocation, T4BuildResult> requestCompilation,
      [NotNull] RdCall<T4FileLocation, Unit> executionSucceeded,
      [NotNull] RdCall<T4FileLocation, Unit> executionFailed,
      [NotNull] RdCall<T4FileLocation, Unit> executionAborted,
      [NotNull] RdCall<T4FileLocation, List<int>> getProjectDependencies,
      [NotNull] RdCall<T4FileLocation, Unit> prepareExecution
    )
    {
      if (requestExecution == null) throw new ArgumentNullException("requestExecution");
      if (requestDebug == null) throw new ArgumentNullException("requestDebug");
      if (preprocessingStarted == null) throw new ArgumentNullException("preprocessingStarted");
      if (preprocessingFinished == null) throw new ArgumentNullException("preprocessingFinished");
      if (getConfiguration == null) throw new ArgumentNullException("getConfiguration");
      if (requestCompilation == null) throw new ArgumentNullException("requestCompilation");
      if (executionSucceeded == null) throw new ArgumentNullException("executionSucceeded");
      if (executionFailed == null) throw new ArgumentNullException("executionFailed");
      if (executionAborted == null) throw new ArgumentNullException("executionAborted");
      if (getProjectDependencies == null) throw new ArgumentNullException("getProjectDependencies");
      if (prepareExecution == null) throw new ArgumentNullException("prepareExecution");
      
      _RequestExecution = requestExecution;
      _RequestDebug = requestDebug;
      _PreprocessingStarted = preprocessingStarted;
      _PreprocessingFinished = preprocessingFinished;
      _GetConfiguration = getConfiguration;
      _RequestCompilation = requestCompilation;
      _ExecutionSucceeded = executionSucceeded;
      _ExecutionFailed = executionFailed;
      _ExecutionAborted = executionAborted;
      _GetProjectDependencies = getProjectDependencies;
      _PrepareExecution = prepareExecution;
      _RequestExecution.Async = true;
      _RequestDebug.Async = true;
      _PreprocessingStarted.Async = true;
      _PreprocessingFinished.Async = true;
      _GetConfiguration.Async = true;
      _RequestCompilation.Async = true;
      _ExecutionSucceeded.Async = true;
      _ExecutionFailed.Async = true;
      _ExecutionAborted.Async = true;
      _GetProjectDependencies.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("requestExecution", _RequestExecution));
      BindableChildren.Add(new KeyValuePair<string, object>("requestDebug", _RequestDebug));
      BindableChildren.Add(new KeyValuePair<string, object>("preprocessingStarted", _PreprocessingStarted));
      BindableChildren.Add(new KeyValuePair<string, object>("preprocessingFinished", _PreprocessingFinished));
      BindableChildren.Add(new KeyValuePair<string, object>("getConfiguration", _GetConfiguration));
      BindableChildren.Add(new KeyValuePair<string, object>("requestCompilation", _RequestCompilation));
      BindableChildren.Add(new KeyValuePair<string, object>("executionSucceeded", _ExecutionSucceeded));
      BindableChildren.Add(new KeyValuePair<string, object>("executionFailed", _ExecutionFailed));
      BindableChildren.Add(new KeyValuePair<string, object>("executionAborted", _ExecutionAborted));
      BindableChildren.Add(new KeyValuePair<string, object>("getProjectDependencies", _GetProjectDependencies));
      BindableChildren.Add(new KeyValuePair<string, object>("prepareExecution", _PrepareExecution));
    }
    //secondary constructor
    internal T4ProtocolModel (
    ) : this (
      new RdCall<T4ExecutionRequest, Unit>(T4ExecutionRequest.Read, T4ExecutionRequest.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<T4ExecutionRequest, Unit>(T4ExecutionRequest.Read, T4ExecutionRequest.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdSignal<Unit>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdSignal<T4PreprocessingResult>(T4PreprocessingResult.Read, T4PreprocessingResult.Write),
      new RdCall<T4FileLocation, T4ConfigurationModel>(T4FileLocation.Read, T4FileLocation.Write, T4ConfigurationModel.Read, T4ConfigurationModel.Write),
      new RdCall<T4FileLocation, T4BuildResult>(T4FileLocation.Read, T4FileLocation.Write, T4BuildResult.Read, T4BuildResult.Write),
      new RdCall<T4FileLocation, Unit>(T4FileLocation.Read, T4FileLocation.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<T4FileLocation, Unit>(T4FileLocation.Read, T4FileLocation.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<T4FileLocation, Unit>(T4FileLocation.Read, T4FileLocation.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<T4FileLocation, List<int>>(T4FileLocation.Read, T4FileLocation.Write, ReadIntList, WriteIntList),
      new RdCall<T4FileLocation, Unit>(T4FileLocation.Read, T4FileLocation.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<List<int>> ReadIntList = JetBrains.Rd.Impl.Serializers.ReadInt.List();
    
    public static  CtxWriteDelegate<List<int>> WriteIntList = JetBrains.Rd.Impl.Serializers.WriteInt.List();
    
    protected override long SerializationHash => 1390265159997313909L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("T4ProtocolModel (");
      using (printer.IndentCookie()) {
        printer.Print("requestExecution = "); _RequestExecution.PrintEx(printer); printer.Println();
        printer.Print("requestDebug = "); _RequestDebug.PrintEx(printer); printer.Println();
        printer.Print("preprocessingStarted = "); _PreprocessingStarted.PrintEx(printer); printer.Println();
        printer.Print("preprocessingFinished = "); _PreprocessingFinished.PrintEx(printer); printer.Println();
        printer.Print("getConfiguration = "); _GetConfiguration.PrintEx(printer); printer.Println();
        printer.Print("requestCompilation = "); _RequestCompilation.PrintEx(printer); printer.Println();
        printer.Print("executionSucceeded = "); _ExecutionSucceeded.PrintEx(printer); printer.Println();
        printer.Print("executionFailed = "); _ExecutionFailed.PrintEx(printer); printer.Println();
        printer.Print("executionAborted = "); _ExecutionAborted.PrintEx(printer); printer.Println();
        printer.Print("getProjectDependencies = "); _GetProjectDependencies.PrintEx(printer); printer.Println();
        printer.Print("prepareExecution = "); _PrepareExecution.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionT4ProtocolModelEx
   {
    public static T4ProtocolModel GetT4ProtocolModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("t4ProtocolModel", () => new T4ProtocolModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:23</p>
  /// </summary>
  public sealed class T4BuildMessage : IPrintable, IEquatable<T4BuildMessage>
  {
    //fields
    //public fields
    public T4BuildMessageKind BuildMessageKind {get; private set;}
    [NotNull] public string Id {get; private set;}
    [NotNull] public T4Location Location {get; private set;}
    [NotNull] public string Content {get; private set;}
    public int ProjectId {get; private set;}
    [CanBeNull] public string File {get; private set;}
    
    //private fields
    //primary constructor
    public T4BuildMessage(
      T4BuildMessageKind buildMessageKind,
      [NotNull] string id,
      [NotNull] T4Location location,
      [NotNull] string content,
      int projectId,
      [CanBeNull] string file
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (location == null) throw new ArgumentNullException("location");
      if (content == null) throw new ArgumentNullException("content");
      
      BuildMessageKind = buildMessageKind;
      Id = id;
      Location = location;
      Content = content;
      ProjectId = projectId;
      File = file;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out T4BuildMessageKind buildMessageKind, [NotNull] out string id, [NotNull] out T4Location location, [NotNull] out string content, out int projectId, [CanBeNull] out string file)
    {
      buildMessageKind = BuildMessageKind;
      id = Id;
      location = Location;
      content = Content;
      projectId = ProjectId;
      file = File;
    }
    //statics
    
    public static CtxReadDelegate<T4BuildMessage> Read = (ctx, reader) => 
    {
      var buildMessageKind = (T4BuildMessageKind)reader.ReadInt();
      var id = reader.ReadString();
      var location = T4Location.Read(ctx, reader);
      var content = reader.ReadString();
      var projectId = reader.ReadInt();
      var file = ReadStringNullable(ctx, reader);
      var _result = new T4BuildMessage(buildMessageKind, id, location, content, projectId, file);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<T4BuildMessage> Write = (ctx, writer, value) => 
    {
      writer.Write((int)value.BuildMessageKind);
      writer.Write(value.Id);
      T4Location.Write(ctx, writer, value.Location);
      writer.Write(value.Content);
      writer.Write(value.ProjectId);
      WriteStringNullable(ctx, writer, value.File);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((T4BuildMessage) obj);
    }
    public bool Equals(T4BuildMessage other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return BuildMessageKind == other.BuildMessageKind && Id == other.Id && Equals(Location, other.Location) && Content == other.Content && ProjectId == other.ProjectId && Equals(File, other.File);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (int) BuildMessageKind;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Location.GetHashCode();
        hash = hash * 31 + Content.GetHashCode();
        hash = hash * 31 + ProjectId.GetHashCode();
        hash = hash * 31 + (File != null ? File.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("T4BuildMessage (");
      using (printer.IndentCookie()) {
        printer.Print("buildMessageKind = "); BuildMessageKind.PrintEx(printer); printer.Println();
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("location = "); Location.PrintEx(printer); printer.Println();
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
        printer.Print("projectId = "); ProjectId.PrintEx(printer); printer.Println();
        printer.Print("file = "); File.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:11</p>
  /// </summary>
  public enum T4BuildMessageKind {
    Message,
    Success,
    Warning,
    Error
  }
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:38</p>
  /// </summary>
  public sealed class T4BuildResult : IPrintable, IEquatable<T4BuildResult>
  {
    //fields
    //public fields
    public T4BuildResultKind BuildResultKind {get; private set;}
    [NotNull] public List<T4BuildMessage> Messages {get; private set;}
    
    //private fields
    //primary constructor
    public T4BuildResult(
      T4BuildResultKind buildResultKind,
      [NotNull] List<T4BuildMessage> messages
    )
    {
      if (messages == null) throw new ArgumentNullException("messages");
      
      BuildResultKind = buildResultKind;
      Messages = messages;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out T4BuildResultKind buildResultKind, [NotNull] out List<T4BuildMessage> messages)
    {
      buildResultKind = BuildResultKind;
      messages = Messages;
    }
    //statics
    
    public static CtxReadDelegate<T4BuildResult> Read = (ctx, reader) => 
    {
      var buildResultKind = (T4BuildResultKind)reader.ReadInt();
      var messages = ReadT4BuildMessageList(ctx, reader);
      var _result = new T4BuildResult(buildResultKind, messages);
      return _result;
    };
    public static CtxReadDelegate<List<T4BuildMessage>> ReadT4BuildMessageList = T4BuildMessage.Read.List();
    
    public static CtxWriteDelegate<T4BuildResult> Write = (ctx, writer, value) => 
    {
      writer.Write((int)value.BuildResultKind);
      WriteT4BuildMessageList(ctx, writer, value.Messages);
    };
    public static  CtxWriteDelegate<List<T4BuildMessage>> WriteT4BuildMessageList = T4BuildMessage.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((T4BuildResult) obj);
    }
    public bool Equals(T4BuildResult other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return BuildResultKind == other.BuildResultKind && Messages.SequenceEqual(other.Messages);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (int) BuildResultKind;
        hash = hash * 31 + Messages.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("T4BuildResult (");
      using (printer.IndentCookie()) {
        printer.Print("buildResultKind = "); BuildResultKind.PrintEx(printer); printer.Println();
        printer.Print("messages = "); Messages.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:32</p>
  /// </summary>
  public enum T4BuildResultKind {
    HasErrors,
    HasWarnings,
    Successful
  }
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:43</p>
  /// </summary>
  public sealed class T4ConfigurationModel : IPrintable, IEquatable<T4ConfigurationModel>
  {
    //fields
    //public fields
    [NotNull] public string ExecutablePath {get; private set;}
    [NotNull] public string OutputPath {get; private set;}
    public int EnvDTEPort {get; private set;}
    
    //private fields
    //primary constructor
    public T4ConfigurationModel(
      [NotNull] string executablePath,
      [NotNull] string outputPath,
      int envDTEPort
    )
    {
      if (executablePath == null) throw new ArgumentNullException("executablePath");
      if (outputPath == null) throw new ArgumentNullException("outputPath");
      
      ExecutablePath = executablePath;
      OutputPath = outputPath;
      EnvDTEPort = envDTEPort;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string executablePath, [NotNull] out string outputPath, out int envDTEPort)
    {
      executablePath = ExecutablePath;
      outputPath = OutputPath;
      envDTEPort = EnvDTEPort;
    }
    //statics
    
    public static CtxReadDelegate<T4ConfigurationModel> Read = (ctx, reader) => 
    {
      var executablePath = reader.ReadString();
      var outputPath = reader.ReadString();
      var envDTEPort = reader.ReadInt();
      var _result = new T4ConfigurationModel(executablePath, outputPath, envDTEPort);
      return _result;
    };
    
    public static CtxWriteDelegate<T4ConfigurationModel> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ExecutablePath);
      writer.Write(value.OutputPath);
      writer.Write(value.EnvDTEPort);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((T4ConfigurationModel) obj);
    }
    public bool Equals(T4ConfigurationModel other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ExecutablePath == other.ExecutablePath && OutputPath == other.OutputPath && EnvDTEPort == other.EnvDTEPort;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ExecutablePath.GetHashCode();
        hash = hash * 31 + OutputPath.GetHashCode();
        hash = hash * 31 + EnvDTEPort.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("T4ConfigurationModel (");
      using (printer.IndentCookie()) {
        printer.Print("executablePath = "); ExecutablePath.PrintEx(printer); printer.Println();
        printer.Print("outputPath = "); OutputPath.PrintEx(printer); printer.Println();
        printer.Print("envDTEPort = "); EnvDTEPort.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:59</p>
  /// </summary>
  public sealed class T4ExecutionRequest : IPrintable, IEquatable<T4ExecutionRequest>
  {
    //fields
    //public fields
    [NotNull] public T4FileLocation Location {get; private set;}
    public bool IsVisible {get; private set;}
    
    //private fields
    //primary constructor
    public T4ExecutionRequest(
      [NotNull] T4FileLocation location,
      bool isVisible
    )
    {
      if (location == null) throw new ArgumentNullException("location");
      
      Location = location;
      IsVisible = isVisible;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out T4FileLocation location, out bool isVisible)
    {
      location = Location;
      isVisible = IsVisible;
    }
    //statics
    
    public static CtxReadDelegate<T4ExecutionRequest> Read = (ctx, reader) => 
    {
      var location = T4FileLocation.Read(ctx, reader);
      var isVisible = reader.ReadBool();
      var _result = new T4ExecutionRequest(location, isVisible);
      return _result;
    };
    
    public static CtxWriteDelegate<T4ExecutionRequest> Write = (ctx, writer, value) => 
    {
      T4FileLocation.Write(ctx, writer, value.Location);
      writer.Write(value.IsVisible);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((T4ExecutionRequest) obj);
    }
    public bool Equals(T4ExecutionRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Location, other.Location) && IsVisible == other.IsVisible;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Location.GetHashCode();
        hash = hash * 31 + IsVisible.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("T4ExecutionRequest (");
      using (printer.IndentCookie()) {
        printer.Print("location = "); Location.PrintEx(printer); printer.Println();
        printer.Print("isVisible = "); IsVisible.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:49</p>
  /// </summary>
  public sealed class T4FileLocation : IPrintable, IEquatable<T4FileLocation>
  {
    //fields
    //public fields
    public int Id {get; private set;}
    
    //private fields
    //primary constructor
    public T4FileLocation(
      int id
    )
    {
      Id = id;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int id)
    {
      id = Id;
    }
    //statics
    
    public static CtxReadDelegate<T4FileLocation> Read = (ctx, reader) => 
    {
      var id = reader.ReadInt();
      var _result = new T4FileLocation(id);
      return _result;
    };
    
    public static CtxWriteDelegate<T4FileLocation> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((T4FileLocation) obj);
    }
    public bool Equals(T4FileLocation other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("T4FileLocation (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:18</p>
  /// </summary>
  public sealed class T4Location : IPrintable, IEquatable<T4Location>
  {
    //fields
    //public fields
    public int Line {get; private set;}
    public int Column {get; private set;}
    
    //private fields
    //primary constructor
    public T4Location(
      int line,
      int column
    )
    {
      Line = line;
      Column = column;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int line, out int column)
    {
      line = Line;
      column = Column;
    }
    //statics
    
    public static CtxReadDelegate<T4Location> Read = (ctx, reader) => 
    {
      var line = reader.ReadInt();
      var column = reader.ReadInt();
      var _result = new T4Location(line, column);
      return _result;
    };
    
    public static CtxWriteDelegate<T4Location> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Line);
      writer.Write(value.Column);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((T4Location) obj);
    }
    public bool Equals(T4Location other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Line == other.Line && Column == other.Column;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Line.GetHashCode();
        hash = hash * 31 + Column.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("T4Location (");
      using (printer.IndentCookie()) {
        printer.Print("line = "); Line.PrintEx(printer); printer.Println();
        printer.Print("column = "); Column.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: T4ProtocolModel.kt:53</p>
  /// </summary>
  public sealed class T4PreprocessingResult : IPrintable, IEquatable<T4PreprocessingResult>
  {
    //fields
    //public fields
    [NotNull] public T4FileLocation Location {get; private set;}
    public bool Succeeded {get; private set;}
    [NotNull] public List<T4BuildMessage> Message {get; private set;}
    
    //private fields
    //primary constructor
    public T4PreprocessingResult(
      [NotNull] T4FileLocation location,
      bool succeeded,
      [NotNull] List<T4BuildMessage> message
    )
    {
      if (location == null) throw new ArgumentNullException("location");
      if (message == null) throw new ArgumentNullException("message");
      
      Location = location;
      Succeeded = succeeded;
      Message = message;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out T4FileLocation location, out bool succeeded, [NotNull] out List<T4BuildMessage> message)
    {
      location = Location;
      succeeded = Succeeded;
      message = Message;
    }
    //statics
    
    public static CtxReadDelegate<T4PreprocessingResult> Read = (ctx, reader) => 
    {
      var location = T4FileLocation.Read(ctx, reader);
      var succeeded = reader.ReadBool();
      var message = ReadT4BuildMessageList(ctx, reader);
      var _result = new T4PreprocessingResult(location, succeeded, message);
      return _result;
    };
    public static CtxReadDelegate<List<T4BuildMessage>> ReadT4BuildMessageList = T4BuildMessage.Read.List();
    
    public static CtxWriteDelegate<T4PreprocessingResult> Write = (ctx, writer, value) => 
    {
      T4FileLocation.Write(ctx, writer, value.Location);
      writer.Write(value.Succeeded);
      WriteT4BuildMessageList(ctx, writer, value.Message);
    };
    public static  CtxWriteDelegate<List<T4BuildMessage>> WriteT4BuildMessageList = T4BuildMessage.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((T4PreprocessingResult) obj);
    }
    public bool Equals(T4PreprocessingResult other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Location, other.Location) && Succeeded == other.Succeeded && Message.SequenceEqual(other.Message);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Location.GetHashCode();
        hash = hash * 31 + Succeeded.GetHashCode();
        hash = hash * 31 + Message.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("T4PreprocessingResult (");
      using (printer.IndentCookie()) {
        printer.Print("location = "); Location.PrintEx(printer); printer.Println();
        printer.Print("succeeded = "); Succeeded.PrintEx(printer); printer.Println();
        printer.Print("message = "); Message.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
