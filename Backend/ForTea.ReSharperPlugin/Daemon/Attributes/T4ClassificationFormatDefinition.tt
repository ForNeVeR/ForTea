<#@ template language="C#" #>
<#@ assembly name="System.Drawing" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Drawing" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#@ include file="$(T4UtilsLocation)T4StringUtils.ttinclude" #>
using System.ComponentModel.Composition;
using System.Windows.Media;
using JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.FormatDefinitions;
using Microsoft.VisualStudio.Text.Classification;
using Microsoft.VisualStudio.Utilities;
using JetBrains.TextControl.DocumentMarkup;
using GammaJul.ForTea.Core.Daemon.Attributes;
using JetBrains.ForTea.ReSharperPlugin.Daemon.Attributes;
<#
    var identifiers = new List<T4ColoredIdentifier>
    {
        new T4ColoredIdentifier(
            "block tag",
            this,
            backgroundColor: ColorTranslator.FromHtml("#FBFB64"),
            foregroundColor: Color.Black),
        new T4ColoredIdentifier(
            "directive",
            this,
            backgroundColor: Color.Transparent,
            foregroundColor: Color.Purple),
        new T4ColoredIdentifier(
            "directive attribute",
            this,
            backgroundColor: Color.Transparent,
            foregroundColor: Color.DarkBlue),
        new T4ColoredIdentifier(
            "attribute value",
            this,
            backgroundColor: Color.Transparent,
            foregroundColor: ColorTranslator.FromHtml("#9C5800"))
    };
#>
#region registraction
<#
    foreach (var identifier in identifiers)
    {
#>
[assembly: RegisterHighlighter(
	T4ReSharperCustomHighlightingIds.<#= ToConstantIdentifier(identifier.Name)
#>,
	GroupId = T4HighlightingAttributeGroup.ID,
	EffectType = EffectType.TEXT,
	ForegroundColor = "<# PrintHexColor(identifier.ForegroundColor); #>",
	BackgroundColor = "<# PrintHexColor(identifier.BackgroundColor); #>",
	Layer = HighlighterLayer.ADDITIONAL_SYNTAX,
	VSPriority = VSPriority.IDENTIFIERS
)]
<#
    }
#>
#endregion

namespace JetBrains.ForTea.ReSharperPlugin.Daemon.Attributes
{
	#region IDs
	public static class T4ReSharperCustomHighlightingIds
	{
<#
    foreach (var identifier in identifiers)
    {
#>
		public const string <#= ToConstantIdentifier(identifier.Name) #> = "<#= ToPrintable(identifier.Name) #>";
<#
    }
#>
	}
	#endregion
<#
    foreach (var identifier in identifiers)
    {
#>

	#region <#= identifier.Name #>
	[ClassificationType(ClassificationTypeNames = Name)]
	[Order(
		After = VsSyntaxPriorityClassificationDefinition.Name,
		Before = VsAnalysisPriorityClassificationDefinition.Name
	)]
	[Export(typeof(EditorFormatDefinition))]
	[Name(Name)]
	[System.ComponentModel.DisplayName(Name)]
	[UserVisible(true)]
	internal sealed class <# identifier.PrintGeneratedClassName(); #> : ClassificationFormatDefinition
	{
		private const string Name = T4ReSharperCustomHighlightingIds.<#= ToConstantIdentifier(identifier.Name)
#>;
		
		public <# identifier.PrintGeneratedClassName(); #>()
		{
			DisplayName = Name;
<#
		          if (identifier.BackgroundColor.A != 0)
		          {
#>			BackgroundColor = Color.FromRgb(<#
		              PrintColorComponents(identifier.BackgroundColor);
#>);
<#
		          }
#>
<#
		          if (identifier.ForegroundColor.A != 0)
		          {
#>			ForegroundColor = Color.FromRgb(<#
		              PrintColorComponents(identifier.ForegroundColor);
#>);
<#
		          }
#>
		}
		
		[Export, Name(Name), BaseDefinition("formal language")]
		internal ClassificationTypeDefinition ClassificationTypeDefinition;
	}
	#endregion 
<#
    }
#>
}
<#+

    private void PrintColorComponents(Color color)
    {
#>0x<#= color.R.ToString("X2") #>, 0x<#= color.G.ToString("X2") #>, 0x<#= color.B.ToString("X2") #><#+
    }

    private void PrintHexColor(Color color)
    {
#>#<#= color.R.ToString("X2") #><#= color.G.ToString("X2")#><#= color.B.ToString("X2") #><#+
    }

    private sealed class T4ColoredIdentifier
    {
        private GeneratedTextTransformation Transformation { get; }
        public string Name { get; }
        public Color BackgroundColor { get; }
        public Color ForegroundColor { get; }

        public T4ColoredIdentifier(
            string name,
            GeneratedTextTransformation transformation,
            Color backgroundColor,
            Color foregroundColor)
        {
            Name = name;
            Transformation = transformation;
            BackgroundColor = backgroundColor;
            ForegroundColor = foregroundColor;
        }

        public void PrintGeneratedClassName() =>
            Transformation.Write("{0}ClassificationFormatDefinition", ToIdentifier(Name));
    }

#>